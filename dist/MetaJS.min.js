!function(a,b){var c=function(a){this._processors={},"undefined"!=typeof a&&this.setProcessors(a)};c.prototype={process:function(){for(var a in this._processors)this._processors[a].process.apply(this._processors[a],Array.prototype.slice.call(arguments))},getProcessor:function(a){return this.checkProcessor(a),this._processors[a]},hasProcessor:function(a){return a in this._processors},setProcessor:function(a,b){if("undefined"==typeof b)b=e.get(a);else if("function"==typeof b)b={process:b};else if("function"!=typeof b.process)throw new Error('Meta processor must have "process" function!');return this._processors[a]=b,this},removeProcessor:function(a){this.checkProcessor(a);var b=this._processors[a];return delete this._processors[a],b},checkProcessor:function(a){if(!this.hasProcessor(a))throw new Error('Chain meta processor "'+this.getName()+'" does not have processor "'+a+'"!')},getProcessors:function(){return this._processors},setProcessors:function(a){if("[object Array]"===Object.prototype.toString.call(a))for(var b=0,c=a.length;c>b;++b)this.setProcessor(a[b]);else for(var d in a)this.setProcessor(d,a[d]);return this}};var d=function(a){if("object"!=typeof a)throw new Error("Interface must be an object!");this._interface=a};d.prototype={process:function(a){for(var b in this._interface)a[b]=this.copy(this._interface[b])},copy:function(a){var b,c=Object.prototype.toString.apply(a);if("object"!=typeof a)b=a;else if("[object Date]"===c)b=new Date(a.getTime());else if("[object Array]"===c){b=[];for(var d=0,e=a.length;e>d;++d)b[d]=this.copy(a[d])}else if("[object RegExp]"===c)b=new RegExp(a.source);else{b={};for(var f in a)b[f]=this.copy(a[f])}return b}};var e={_hash:{},Interface:d,Chain:c,get:function(a){return this.check(a),this._hash[a]},has:function(a){return a in this._hash},set:function(a,b){if("[object Array]"===Object.prototype.toString.call(b))b=new c(b);else if("function"==typeof b)b={process:b};else if("function"!=typeof b.process)throw new Error('Meta processor must have "process" function!');return this._hash[a]=b,this},remove:function(a){this.check(a);var b=this._hash[a];return delete this._hash[a],b},check:function(a){if(!this.has(a))throw new Error('Processor container "'+this.getName()+'" does not have processor "'+a+'"!')},gets:function(){return this._hash},sets:function(a){for(var b in a)this.set(b,a[b]);return this}},f=function(a,b){if("undefined"==typeof a)throw new Error("Meta option name must be specified!");this._name=a,this._processor={},"undefined"!=typeof b&&this.setProcessor(b)};f.DEFAULT="DEFAULT",f.prototype={process:function(a,b){this._processor.process.apply(this._processor,[a,b,this.getName()].concat(Array.prototype.slice.call(arguments,2)))},getName:function(){return this._name},getProcessor:function(){return this._processor},hasProcessor:function(){return!!this._processor},setProcessor:function(a){if("[object Array]"===Object.prototype.toString.call(a))a=new c(a);else if("string"==typeof a)a=e.get(a);else if("function"==typeof a)a={process:a};else if("function"!=typeof a.process)throw new Error('Meta processor must have "process" method!');return this._processor=a,this}};var g=function(a){this._objectHandler=null,this._options={},"options"in a&&this.setOptions(a.options),"objectHandler"in a&&this.setObjectHandler(a.objectHandler)};g.prototype={process:function(a,b){var c,d;this._objectHandler&&(a=this._objectHandler(a));for(d in b)c=this.hasOption(d)?this.getOption(d):this.hasOption(f.DEFAULT)?this.getOption(f.DEFAULT):null,c&&c.process.apply(c,[a,b[d]].concat(Array.prototype.slice.call(arguments,2)))},setObjectHandler:function(a){if("function"!=typeof a)throw new Error("Object handler must be a function");return this._objectHandler=a,this},getOption:function(a){return this.checkOption(a),this._options[a]},hasOption:function(a){return a in this._options},setOption:function(a){if(!(a instanceof f))throw new Error('Meta option must be instance of "Option" class!');return this._options[a.getName()]=a,this},removeOption:function(a){this.checkOption(a);var b=this._options[a];return delete this._options[a],b},getOptions:function(){return this._options},setOptions:function(a){if("[object Array]"===Object.prototype.toString.apply(a))for(var b=0,c=a.length;c>b;++b)this.setOption(a[b]);else for(var d in a)this.setOption(new f(d,a[d]));return this},checkOption:function(a){if(!this.hasOption(a))throw new Error('Meta option "'+a+'" does not exists!')}};var h=function(a,b){if("undefined"==typeof a)throw new Error("Meta type must have a name!");this._name=a,this._metaHandlers={},"undefined"!=typeof b&&this.setMetaHandlers(b)};h.prototype={META_HANDLER_NAME:"MetaHandler{uid}",_uid:0,process:function(){var a,b;for(a in this._metaHandlers)b=this._metaHandlers[a],b.process.apply(b,Array.prototype.slice.call(arguments))},getName:function(){return this._name},getMetaHandler:function(a){return this.checkMetaHandler(a),this._metaHandlers[a]},hasMetaHandler:function(a){return a in this._metaHandlers},setMetaHandler:function(a,b){return b instanceof g||(b=new g(b)),a||(a=this.generateName()),this._metaHandlers[a]=b,this},setMetaHandlers:function(a){if("[object Array]"===Object.prototype.toString.call(a))for(var b=0,c=a.length;c>b;++b)this.setMetaHandler(a[b]);else for(var d in a)this.setMetaHandler(d,a[d]);return this},getMetaHandlers:function(){return this._metaHandlers},checkMetaHandler:function(a){if(!this.hasMetaHandler(a))throw new Error('Meta handler "'+a+'" does not exists for meta type "'+this.getName()+'"!')},generateName:function(){return this.META_HANDLER_NAME.replace("{uid}",++this._uid)}};var i={_types:{},getType:function(a){return this.checkType(a),this._types[a]},hasType:function(a){return a in this._types},setType:function(a,b){var c=a instanceof h?a:new h(a,b);return this._types[c.getName()]=c,this},removeType:function(a){this.checkType(a);var b=this._types[a];return delete this._types[a],b},getTypes:function(){return this._types},setTypes:function(a){if("[object Array]"===Object.prototype.toString.call(a))for(var b=0,c=a.length;c>b;++b)this.setTypes(a[b]);else for(var d in a)this.setType(d,a[d]);return this},checkType:function(a){if(!this.hasType(a))throw new Error('Meta type "'+a+'" does not exists!')}};a.Meta={Manager:i,Handler:g,Type:h,Option:f,Processors:e}}(this);
//# sourceMappingURL=dist/MetaJS.min.map